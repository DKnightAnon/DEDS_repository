CREATE TRIGGER Staff_Training_Insert_TR
ON STAFF_TRAINING
INSTEAD OF INSERT
AS
DECLARE @COURSE_FK int
DECLARE @COURSE_FSK int

DECLARE @SATISFACTION_FK int
DECLARE @SATISFACTION_FSK int
DECLARE @SATISFACTION_YEAR int
DECLARE @SATISFACTION_STAFF_CODE int
DECLARE @SALES_STAFF_CODE int 
DECLARE @SALES_STAFF_FSK int

DECLARE @TIMESTAMP DATETIME

SELECT @COURSE_FK = COURSE_CODE_FK FROM INSERTED
SELECT @SATISFACTION_FK = SATISFACTION_FK FROM INSERTED
SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)--TIMESTAMP FROM INSERTED
SELECT @SATISFACTION_YEAR = YEAR_PK from INSERTED
SELECT @SATISFACTION_STAFF_CODE = SALES_STAFF_CODE_PK FROM INSERTED
SELECT @SALES_STAFF_CODE = SALES_STAFF_CODE_PK FROM INSERTED

SELECT @COURSE_FSK = (SELECT top(1) ID_SK FROM COURSE 
        WHERE COURSE.COURSE_CODE_FK = @COURSE_FK
        AND COURSE.TIMESTAMP < @TIMESTAMP
        ORDER BY COURSE.TIMESTAMP DESC)

-- AND's vanwege samengestelde sleutel
SELECT @SATISFACTION_FSK = (SELECT top(1) ID_SK FROM SATISFACTION
        WHERE SATISFACTION.YEAR_PK = @SATISFACTION_YEAR
        AND SATISFACTION.SALES_STAFF_CODE = @SATISFACTION_STAFF_CODE
        AND SATISFACTION.TIMESTAMP < @TIMESTAMP
        ORDER BY SATISFACTION.TIMESTAMP DESC)


SELECT @SALES_STAFF_FSK = (SELECT TOP(1) ID_SK FROM SALES_STAFF
		WHERE SALES_STAFF.SALES_STAFF_CODE_PK = @SALES_STAFF_CODE
		AND SALES_STAFF.TIMESTAMP < @TIMESTAMP 
		ORDER BY SALES_STAFF.TIMESTAMP)


BEGIN
	INSERT INTO STAFF_TRAINING
		(
		YEAR_PK, 
		SALES_STAFF_CODE_PK,
		SALES_STAFF_CODE_FSK,
		FULL_NAME,
		POSITION_EN,
		COURSE_CODE_FK,
		COURSE_CODE_FSK,
		SATISFACTION_FK,
		SATISFACTION_FSK
		)
	SELECT 
		YEAR_PK,
		SALES_STAFF_CODE_PK,
		@SALES_STAFF_FSK,
		FULL_NAME,
		POSITION_EN,
		COURSE_CODE_FK,
		@COURSE_FSK AS 'COURSE_CODE_FSK',
		SATISFACTION_FK, 
		@SATISFACTION_FSK AS 'SATISFACTION_TYPE_CODE_FSK'
	FROM INSERTED
END;


-- SALES_STAFF_INSERT_TR

CREATE TRIGGER SALES_STAFF_INSERT_TR
ON SALES_STAFF
INSTEAD OF INSERT
AS
DECLARE @TIMESTAMP DATETIME
DECLARE @SALES_BRANCH_FK int
DECLARE @SALES_BRANCH_FSK int

SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)
SELECT @SALES_BRANCH_FK = SALES_BRANCH_CODE FROM INSERTED
SELECT @SALES_BRANCH_FSK = (SELECT top(1) ID_SK FROM SALES_BRANCH
		WHERE SALES_BRANCH.SALES_BRANCH_CODE_PK = @SALES_BRANCH_FK
		AND SALES_BRANCH.TIMESTAMP < @TIMESTAMP 
		ORDER BY SALES_BRANCH.TIMESTAMP DESC)
BEGIN
	INSERT INTO SALES_STAFF(
	SALES_STAFF_CODE_PK,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	POSITION_EN,
	WORK_PHONE,
	EXTENSION,
	FAX,
	EMAIL,
	DATE_HIRED,
	SALES_BRANCH_CODE_FSK,
	SALES_BRANCH_CODE,
	MANAGER_CODE
	)
	SELECT
	SALES_STAFF_CODE_PK,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	POSITION_EN,
	WORK_PHONE,
	EXTENSION,
	FAX,
	EMAIL,
	DATE_HIRED,
	@SALES_BRANCH_FSK,
	SALES_BRANCH_CODE,
	MANAGER_CODE
	FROM INSERTED
END

--SATISFACTION Inser trigger

CREATE TRIGGER SATISFACTION_INSERT_TR
ON SATISFACTION
INSTEAD OF INSERT

AS 

DECLARE @TIMESTAMP DATETIME
SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)

DECLARE @SALES_STAFF int 
SELECT @SALES_STAFF = SALES_STAFF_CODE FROM INSERTED

DECLARE @SALES_STAFF_FSK int 
SELECT @SALES_STAFF_FSK = (SELECT TOP(1) ID_SK FROM SALES_STAFF
		WHERE SALES_STAFF.SALES_STAFF_CODE_PK = @SALES_STAFF
		AND SALES_STAFF.TIMESTAMP < @TIMESTAMP 
		ORDER BY SALES_STAFF.TIMESTAMP DESC)
BEGIN
	INSERT INTO SATISFACTION(
		YEAR_PK,
		SALES_STAFF_CODE,
		SALES_STAFF_FSK,
		SATISFACTION_TYPE_CODE,
		SATISFACTION_TYPE_DESCRIPTION)
	SELECT 
		YEAR_PK,
		SALES_STAFF_CODE,
		@SALES_STAFF_FSK,
		SATISFACTION_TYPE_CODE,
		SATISFACTION_TYPE_DESCRIPTION
	FROM INSERTED
END

--ORDER_DETAILS insert trigger
CREATE TRIGGER ORDER_DETAILS_INSERT_TR
ON ORDER_DETAILS
INSTEAD OF INSERT
AS

DECLARE @TIMESTAMP DATETIME
DECLARE @SALES_BRANCH_FK int
DECLARE @SALES_BRANCH_FSK int

SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)
SELECT @SALES_BRANCH_FK = SALES_BRANCH_CODE_FK FROM INSERTED
SELECT @SALES_BRANCH_FSK = (SELECT top(1) ID_SK FROM SALES_BRANCH
		WHERE SALES_BRANCH.SALES_BRANCH_CODE_PK = @SALES_BRANCH_FK
		AND SALES_BRANCH.TIMESTAMP < @TIMESTAMP 
		ORDER BY SALES_BRANCH.TIMESTAMP DESC)

DECLARE @RETAILER_FK int 
DECLARE @RETAILER_FSK int 

SELECT @RETAILER_FK = RETAILER_SITE_CODE FROM INSERTED
SELECT @RETAILER_FSK = (SELECT TOP(1) ID_SK FROM RETAILER
		WHERE RETAILER.RETAILER_SITE_CODE = @RETAILER_FK
		AND RETAILER.TIMESTAMP < @TIMESTAMP 
		ORDER BY RETAILER.TIMESTAMP DESC)


DECLARE @PRODUCT_NUMBER_FK int 
DECLARE @PRODUCT_NUMBER_FSK int 

SELECT @PRODUCT_NUMBER_FK = PRODUCT_NUMBER FROM INSERTED
SELECT @PRODUCT_NUMBER_FSK = (SELECT TOP(1) ID_SK FROM PRODUCT
		WHERE PRODUCT.PRODUCT_NUMBER_PK = @PRODUCT_NUMBER_FK
		AND PRODUCT.TIMESTAMP < @TIMESTAMP 
		ORDER BY PRODUCT.TIMESTAMP DESC)

DECLARE @ORDER_METHOD int 
SELECT @ORDER_METHOD = ORDER_METHOD_CODE_PK FROM INSERTED
DECLARE @ORDER_METHOD_FSK int 
SELECT @ORDER_METHOD_FSK = (SELECT TOP(1) ID_SK FROM ORDER_METHOD
		WHERE ORDER_METHOD.ORDER_METHOD_CODE = @ORDER_METHOD
		AND ORDER_METHOD.TIMESTAMP < @TIMESTAMP 
		ORDER BY ORDER_METHOD.TIMESTAMP DESC)

BEGIN
	INSERT INTO ORDER_DETAILS(
		ORDER_NUMBER_PK,
		ORDER_DETAIL_CODE_PK,
		ORDER_DETAILS_QUANTITY,

		ORDER_METHOD_CODE_PK,
		ORDER_METHOD_FSK,

		PRODUCT_NUMBER,
		PRODUCT_NUMBER_FSK,

		ORDER_DETAILS_UNIT_COST,
		ORDER_DETAILS_UNIT_PRICE,
		ORDER_DETAILS_UNIT_SALE_PRICE,
		ORDER_DETAILS_DISCOUNT_PERCENTAGE,
		ORDER_DETAILS_TURNOVER,
		ORDER_DETAILS_PROFIT,

		ORDER_DATE,

		SALES_BRANCH_CODE_FK,
		SALES_BRANCH_CODE_FSK,

		RETAILER_FSK,
		RETAILER_SITE_CODE,
		RETAILER_SITE_CONTACT
		)
	SELECT
		ORDER_NUMBER_PK,
		ORDER_DETAIL_CODE_PK,
		ORDER_DETAILS_QUANTITY,

		ORDER_METHOD_CODE_PK,
		@ORDER_METHOD_FSK,

		PRODUCT_NUMBER,
		@PRODUCT_NUMBER_FSK,

		ORDER_DETAILS_UNIT_COST,
		ORDER_DETAILS_UNIT_PRICE,
		ORDER_DETAILS_UNIT_SALE_PRICE,
		ORDER_DETAILS_DISCOUNT_PERCENTAGE,
		ORDER_DETAILS_TURNOVER,
		ORDER_DETAILS_PROFIT,

		ORDER_DATE,

		SALES_BRANCH_CODE_FK,
		@SALES_BRANCH_FSK,

		@RETAILER_FSK,
		RETAILER_SITE_CODE,
		RETAILER_SITE_CONTACT
	FROM INSERTED
END


-- RETURNED_ITEM insert Trigger
CREATE TRIGGER RETURNED_ITEM_Insert_TR
ON RETURNED_ITEM
INSTEAD OF INSERT
AS
DECLARE @TIMESTAMP DATETIME
SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)

DECLARE @ORDER_DETAIL_CODE int 
DECLARE @ORDER_DETAIL_CODE_FSK int 
SELECT @ORDER_DETAIL_CODE = ORDER_DETAIL_CODE FROM INSERTED
SELECT @ORDER_DETAIL_CODE_FSK = (SELECT TOP(1) ID_SK FROM ORDER_DETAILS
		WHERE ORDER_DETAILS.ORDER_DETAIL_CODE_PK = @ORDER_DETAIL_CODE
		AND ORDER_DETAILS.TIMESTAMP <@TIMESTAMP 
		ORDER BY ORDER_DETAILS.TIMESTAMP DESC)

DECLARE @PRODUCT_NUMBER int 
DECLARE @PRODUCT_NUMBER_FSK int 
SELECT @PRODUCT_NUMBER = PRODUCT_NUMBER FROM INSERTED
SELECT @PRODUCT_NUMBER_FSK = (SELECT TOP(1) ID_SK FROM PRODUCT
		WHERE PRODUCT.PRODUCT_NUMBER_PK = @PRODUCT_NUMBER
		AND PRODUCT.TIMESTAMP < @TIMESTAMP 
		ORDER BY PRODUCT.TIMESTAMP DESC)

DECLARE @RETURN_REASON_FK int 
DECLARE @RETURN_REASON_FSK int 
SELECT @RETURN_REASON_FK = RETURN_REASON_FK FROM INSERTED
SELECT @RETURN_REASON_FSK = (SELECT TOP(1) ID_SK FROM RETURN_REASON
		WHERE RETURN_REASON.RETURN_REASON_CODE = @RETURN_REASON_FK
		AND RETURN_REASON.TIMESTAMP < @TIMESTAMP 
		ORDER BY RETURN_REASON.TIMESTAMP DESC)

BEGIN
	INSERT INTO RETURNED_ITEM(
		RETURNED_ITEM_CODE_PK,
		ORDER_DETAIL_CODE,
		ORDER_DETAIL_CODE_FSK,
		RETURN_DATE,
		PRODUCT_NUMBER,
		PRODUCT_NUMBER_FSK,
		RETURN_QUANTITY,
		RETURN_REASON_FK,
		RETURN_REASON_FSK
		)
	SELECT
		RETURNED_ITEM_CODE_PK,
		ORDER_DETAIL_CODE,
		@ORDER_DETAIL_CODE_FSK,
		RETURN_DATE,
		PRODUCT_NUMBER,
		@PRODUCT_NUMBER_FSK,
		RETURN_QUANTITY,
		RETURN_REASON_FK,
		@RETURN_REASON_FSK
	FROM INSERTED
END



--GO_SALES_PRODUCT_FORECASTDATA trigger
CREATE TRIGGER GO_SALES_PRODUCT_FORECASTDATA_Insert_TR
ON GO_SALES_PRODUCT_FORECASTDATA
INSTEAD OF INSERT
AS

DECLARE @TIMESTAMP DATETIME
SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)

DECLARE @PRODUCT_NUMBER int 
DECLARE @PRODUCT_NUMBER_FSK int 
SELECT @PRODUCT_NUMBER = PRODUCT_NUMBER FROM INSERTED
SELECT @PRODUCT_NUMBER_FSK = (SELECT TOP(1) ID_SK FROM PRODUCT
		WHERE PRODUCT.PRODUCT_NUMBER_PK = @PRODUCT_NUMBER
		AND PRODUCT.TIMESTAMP < @TIMESTAMP 
		ORDER BY PRODUCT.TIMESTAMP DESC)

BEGIN
	INSERT INTO GO_SALES_PRODUCT_FORECASTDATA(
		PRODUCT_NUMBER,
		PRODUCT_NUMBER_FSK,
		YEAR,
		MONTH,
		EXPECTED_VOLUME)
	SELECT
		PRODUCT_NUMBER,
		@PRODUCT_NUMBER_FSK,
		YEAR,
		MONTH,
		EXPECTED_VOLUME
	FROM INSERTED
END


--GO_SALES_INVENTORY_LEVELSData trigger

CREATE TRIGGER GO_SALES_INVENTORY_LEVELSData_Insert_TR
ON GO_SALES_INVENTORY_LEVELSData
INSTEAD OF INSERT
AS

DECLARE @TIMESTAMP DATETIME
SELECT @TIMESTAMP = CAST(GETDATE() AS DATETIME)

DECLARE @PRODUCT_NUMBER int 
DECLARE @PRODUCT_NUMBER_FSK int 
SELECT @PRODUCT_NUMBER = PRODUCT_NUMBER FROM INSERTED
SELECT @PRODUCT_NUMBER_FSK = (SELECT TOP(1) ID_SK FROM PRODUCT
		WHERE PRODUCT.PRODUCT_NUMBER_PK = @PRODUCT_NUMBER
		AND PRODUCT.TIMESTAMP < @TIMESTAMP 
		ORDER BY PRODUCT.TIMESTAMP DESC)

BEGIN
	INSERT INTO GO_SALES_INVENTORY_LEVELSData(
		INVENTORY_YEAR,
		INVENTORY_MONTH,
		PRODUCT_NUMBER,
		PRODUCT_NUMBER_FSK,
		INVENTORY_COUNT)
	SELECT
		INVENTORY_YEAR,
		INVENTORY_MONTH,
		PRODUCT_NUMBER,
		@PRODUCT_NUMBER_FSK,
		INVENTORY_COUNT
	FROM INSERTED
END